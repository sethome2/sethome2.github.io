<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://sethome2.github.io</id>
    <title>sethome的橱窗</title>
    <updated>2022-04-09T13:28:36.433Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://sethome2.github.io"/>
    <link rel="self" href="https://sethome2.github.io/atom.xml"/>
    <subtitle>sethome的橱窗</subtitle>
    <logo>https://sethome2.github.io/images/avatar.png</logo>
    <icon>https://sethome2.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, sethome的橱窗</rights>
    <entry>
        <title type="html"><![CDATA[常用的算法技巧]]></title>
        <id>https://sethome2.github.io/post/chang-yong-de-suan-fa-ji-qiao/</id>
        <link href="https://sethome2.github.io/post/chang-yong-de-suan-fa-ji-qiao/">
        </link>
        <updated>2022-04-09T11:48:53.000Z</updated>
        <content type="html"><![CDATA[<p>稍微和骗分导论分开一下，这里主要是搜集算法竞赛一些常用的代码模板和使用小技巧之类的，欢迎收藏~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[背包DP]]></title>
        <id>https://sethome2.github.io/post/bei-bao-dp/</id>
        <link href="https://sethome2.github.io/post/bei-bao-dp/">
        </link>
        <updated>2022-03-25T14:13:54.000Z</updated>
        <content type="html"><![CDATA[<p>嘶，突然想起来，高中的时候其实没有认真学过DP（动态规划）的，记忆化搜索和DP只能说是异曲同工之妙，真正的DP核心在于状态转移方程。</p>
<p>之前遇到DP问题，都是直接恩算，尝试找出二维网格里面的一些关系。今天想了想，是应该从背包DP——这最简单的DP开始，一点一点理解动态规划了。</p>
<p><strong>动态规划是一种通过把原问题分解为更简单的子问题，求解子问题来解决复杂问题的方法</strong></p>
<p>长期更新~人菜瘾大。</p>
<h1 id="什么是背包dp">什么是背包DP？</h1>
<p>背包问题简洁的表述就是</p>
<blockquote>
<p>有N个物品，第i个物品的价值为V<sub>i</sub>，同时它的重量为W<sub>i</sub>，有一个背包能装总重为M的物品，<br>
如何取物品，才能使背包内所有物品的价值最大？</p>
</blockquote>
<p><strong>背包DP可以被分为以下几个类型</strong></p>
<table>
<thead>
<tr>
<th>背包类型</th>
<th>特殊条件</th>
</tr>
</thead>
<tbody>
<tr>
<td>01背包</td>
<td>每个物品只能被拿取一次</td>
</tr>
<tr>
<td>完全背包</td>
<td>每个物品物品都可以被重复拿取</td>
</tr>
<tr>
<td>多重背包</td>
<td>现在有两个以上的独立背包用于拿取了</td>
</tr>
<tr>
<td>混合背包</td>
<td>上面三种的混合，物品可以被拿(1, k, ∞)次，同时又有两个以上的背包</td>
</tr>
</tbody>
</table>
<h1 id="01背包">01背包</h1>
<p>先讲01背包。<br>
参考题目：<a href="https://www.luogu.com.cn/problem/P2871">P2871 [USACO07DEC]Charm Bracelet S</a></p>
<blockquote>
<p>有N个物品，第i个物品的价值为V<sub>i</sub>，同时它的重量为W<sub>i</sub>且只能取一次，<br>
有一个背包能装总重为M的物品，如何取物品，才能使背包内所有物品的价值最大？</p>
</blockquote>
<p>不难想出，我们可以试试每个物品拿或者不拿，可能的组合非常大，为时间复杂度为O(2<sub>N</sub>)。<br>
哪怕如果遇到超过背包装不下的状态而跳过，也是不能接受的复杂度。</p>
<p>先把问题简化一下吧，考虑在三个物品的情况下，背包问题如何解决。</p>
<p>构造一下数据，假设我们的背包能装总重量4的物品（M=4）。</p>
<table>
<thead>
<tr>
<th>物品序号N<sub>i</sub></th>
<th>重量W<sub>i</sub></th>
<th>价值V<sub>i</sub></th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>1</td>
<td>15</td>
</tr>
<tr>
<td>1</td>
<td>3</td>
<td>20</td>
</tr>
<tr>
<td>2</td>
<td>4</td>
<td>30</td>
</tr>
</tbody>
</table>
<p>肉眼观察法，一眼定真，很明显拿取 物品0 和 物品1 是最优的选择。<br>
但是，如何求解呢？<br>
但是某种程度上我们可以求性价比$$f(x) = a_1x^n + a_2x^{n-1} + a_3x^{n-2}$$</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[骗分导论]]></title>
        <id>https://sethome2.github.io/post/pian-fen-dao-lun/</id>
        <link href="https://sethome2.github.io/post/pian-fen-dao-lun/">
        </link>
        <updated>2022-03-19T17:22:33.000Z</updated>
        <content type="html"><![CDATA[<p>按照某个OI圈内十分著名的大神(ID:我是智障)写的，把自己常用的给写在里面hhhhh，都是偏向技巧性的东西，集成了大量在竞赛中非正解骗分的方法。</p>
<p>在这里贴上一段顺口溜</p>
<blockquote>
<p>骗分过样例，暴力出奇迹。暴搜挂着机，打表出省一。N方过百万，暴力踩标算。肥修赛大象，只是代码短。<br>
想要骗到分，一定有方法。图论背模板，数论背公式，动规背方程，高精背代码，要是都不会，干脆输样例。</p>
</blockquote>
<p>其实我打OI的时候，和圈内接触很少，自己学校也就是个位数的人参加NOIP，对这方面不是很熟，多多包涵。</p>
<p>本文章会稳定慢慢更新，欢迎收藏呀</p>
<h1 id="常用的宏定义">常用的宏定义</h1>
<pre><code class="language-c++">#include &quot;bits/stdc++.h&quot;
#define THREE_MAX(a, b, c) (a &gt; b ? (a &gt; c ? a : c) : (b &gt; c ? b : c)) 
#define THREE_MIN(a, b, c) (a &gt; b ? (b &gt; c ? c : b) : (a &gt; c ? c : a)) 
#define DEBUG freopen(&quot;in.txt&quot;,&quot;r+&quot;,stdin);
#define MAKE freopen(&quot;out.txt&quot;,&quot;w+&quot;,stdout);
#define FOREACH(a,b) for(int a = 0;a &lt; b;a++)
#define INIT(a,b) memset(a,b,sizeof(a));
#define ULL unsigned long long
#define LL long long
#define endl '\n'
using namespace std;

int main()
{
    // DEBUG
    // MAKE

    return 0;
}
</code></pre>
<h1 id="线性素数筛">线性素数筛</h1>
<pre><code class="language-c++">bool is_prime[1000001] = {};

void produce()
{
  memset(&amp;is_prime, 1, sizeof(is_prime));
  is_prime[0] = is_prime[1] = 0;
  for (unsigned long long i = 2; i &lt;= 1000000; i++)
  {
    if (i * i &lt;= 1000000)
      for (unsigned long long j = i * i; j &lt;= 1000000; j += i)
        is_prime[j] = 0;
  }
}
</code></pre>
<p>素数打表（遇到就可以直接cv了wwwww,1000001个）<br>
<a href="https://blog.sethome.cc/algorithmFiles/prime.txt">素数打表文件</a></p>
<p>利用费马定理的玄学素数筛</p>
<pre><code class="language-c++">
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[深夜机场]]></title>
        <id>https://sethome2.github.io/post/shen-ye-ji-chang/</id>
        <link href="https://sethome2.github.io/post/shen-ye-ji-chang/">
        </link>
        <updated>2022-02-13T03:02:20.000Z</updated>
        <content type="html"><![CDATA[<p>( •̀ ω •́ )y特地选择了某些早班飞机，在机场拍到的，现在年轻还能熬，后面老了就不行咯。</p>
<p>这些都是在青岛机场拍的。<br>
<img src="https://sethome2.github.io/post-images/1645846530443.jpg" alt="人们的身影1" loading="lazy"><br>
<img src="https://sethome2.github.io/post-images/1645846537604.jpg" alt="人们的身影2" loading="lazy"></p>
<p>后续我把济南的写上来。</p>
<p>更新</p>
<p>济南机场的半夜。啊，其实这个很一般，但是为了凑数，强行挤出来的。<br>
<img src="https://sethome2.github.io/post-images/1647606247450.jpg" alt="济南机场的半夜" loading="lazy"></p>
<p>（高情商）还有很大进步空间</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Panda合集]]></title>
        <id>https://sethome2.github.io/post/panda-he-ji/</id>
        <link href="https://sethome2.github.io/post/panda-he-ji/">
        </link>
        <updated>2021-10-31T17:34:42.000Z</updated>
        <content type="html"><![CDATA[<p>从北京之行单独放出来的~</p>
<p><img src="https://sethome2.github.io/post-images/1635701715798.jpg" alt="熊猫" loading="lazy"><br>
<img src="https://sethome2.github.io/post-images/1635701718678.jpg" alt="熊猫" loading="lazy"><br>
<img src="https://sethome2.github.io/post-images/1635701721691.jpg" alt="熊猫" loading="lazy"><br>
<img src="https://sethome2.github.io/post-images/1635701723952.jpg" alt="熊猫" loading="lazy"></p>
<p>拍的不是很好hhh，第一次拍这种东西<br>
555</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[浅谈TCP连接]]></title>
        <id>https://sethome2.github.io/post/qian-tan-tcp-lian-jie/</id>
        <link href="https://sethome2.github.io/post/qian-tan-tcp-lian-jie/">
        </link>
        <updated>2021-09-15T06:32:26.000Z</updated>
        <content type="html"><![CDATA[<p>唔，这个其实我读《计算机网络——自顶向下方法》（中文第七版）的一个笔记，说不上提炼吧。可以更具页码找到更详细的信息。</p>
<p>我们常常说TCP/IP协议，但是它们是可以拆分开，TCP只是运行在IP协议上的<strong>可靠，面向链接</strong>的一个协议。同样运行在IP协议上的，还有UDP协议，它更简单，但并没有那么可靠。理论上说，稍加修改，TCP和UDP也可以运行在IP协议以外的其他协议之上。</p>
<hr>
<p>我们来简单对比一下这TCP和UDP</p>
<table>
<thead>
<tr>
<th>特点 （P126）</th>
<th>UDP</th>
</tr>
</thead>
<tbody>
<tr>
<td>报文部分</td>
<td>包含源端口号和目的地端口号(32bit),长度和校验和(32bit)</td>
</tr>
<tr>
<td>特点</td>
<td>无连接状态，不可靠（发送方不知道接收方是否收到），时延低，占用内存小</td>
</tr>
<tr>
<td>常见应用</td>
<td>视频电话，语音通信，流媒体传输，远程桌面</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>特点（P154）</th>
<th>TCP</th>
</tr>
</thead>
<tbody>
<tr>
<td>报文部分(P154)</td>
<td>源端口号和目的地端口号(32bit)，序号(seq 32bit)，确认号(32bit)，长度和某些保留备用的选项和接受窗口(32bit)，校验和及数据指指针(32bit)，选项(32bit)</td>
</tr>
<tr>
<td>特点</td>
<td>三次握手（广为人知了），可靠链接，全双工，点对点</td>
</tr>
<tr>
<td>常见应用</td>
<td>网络游戏，邮件发送，账户登陆</td>
</tr>
</tbody>
</table>
<hr>
<p>我们将重点集中在TCP上，在TCP连接的报文部分，含有 序列号Seq 和 确认号（P156）。<br>
在TCP连接开始时，发起TCP连接的一方会发送一个Seq（通常是随机的0-65535），接受的一方也会生成一个随机的seq，此后每一次传输数据后，seq自身+1。</p>
<p>确认号（ACK）则是用于表达自己已接受了一个数据，并等待下一个序号的数据到达。</p>
<p>其实就是双方各自维护自己的一个序列，并确认另一方的序列号</p>
<h1 id="建立tcp连接三次握手p166">建立TCP连接——三次握手（P166）</h1>
<p>这是建立TCP之前的动作，客户端把TCP报文的一个标志位（SYN比特）会被置1，然后会随机生成一个序列号（client_isn），发送给服务器。<br>
服务器在收到后，会返回一个SYN比特区域也为1的数据，其中也包含一个随机生成的序列号（server_ist）。<br>
客户端收到后，会返回一个SYN比特为0的字节包，按照上文所述，其序列号（client_ist）会比上次客户端发出的+1.</p>
<h1 id="关闭tcp连接p167">关闭TCP连接（P167）</h1>
<p>相遇必有分离，在TCP链接关闭时，发起关闭的一方传输TCP报文的一个标志位（FIN比特）会被置1，另一方接收到后返回ACK（接受确认包），同时也发起FIN比特为1的包，等待其返回ACK后，TCP链接就关闭了</p>
<p>连接建立后，上层协议就可以运作了，包括Qos之类的，一直到操作系统的Socket接口（嵌套字），这个取决于上层协议的制定。</p>
<p>TCP的这种连接建立方式还引发了另一个问题，就是SYN泛洪攻击（感觉像是有效率的DDos）。客户端不停尝试建立TCP连接，但是建立到一半（比如到第二次握手时）就不再回应服务器的信息，导致服务器一直存储着TCP连接的状态，白白浪费了内存和CPU时间。<br>
这种情况就有请散列函数上场了，服务器收到TCP建立请求时，先利用源和目的地IP地址和端口号进行散列函数生成自己的序列号（server_ist），并发送给客户机。<br>
客户机第二次握手时，只需要按上面的方式，重新计算序列号（server_ist），此时只需要比较当前的序列号 == 计算序列号（server_ist） + 1即可。</p>
<h1 id="tcp拥塞控制-p176">TCP拥塞控制 （P176）</h1>
<p>大名鼎鼎的Qos，QUIC，DCCP，DCTCP哈哈哈<br>
不过书中提到了很多方式去解决拥塞问题，但已经比较落后了，包括间隔超时加倍，拥塞探测的方法等等，里面还提到了一些公式去计算这些参数。</p>
<p>大概就写这么多吧，还有很多上层协议，比如说DNS，Web，HTTP之类的可以讲，但是我没那么厉害（<br>
不过令我惊讶的是，图论算法在计算机网络里也有广泛应用，它会在网络世界里寻找最短路径（一般不是物理距离上的，而且拥塞情况和时延）来到的目的地服务器，数据中心的路由器也需要这种方法来提高性能。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[北京之行——天安门升旗]]></title>
        <id>https://sethome2.github.io/post/bei-jing-zhi-xing-tian-an-men-sheng-qi/</id>
        <link href="https://sethome2.github.io/post/bei-jing-zhi-xing-tian-an-men-sheng-qi/">
        </link>
        <updated>2021-09-11T04:48:12.000Z</updated>
        <content type="html"><![CDATA[<p>不知道写点啥，干啥都菜。只能随便乱写。其实这个是本年5月份去了，图片都放在桌面上<strong>好久了</strong>，就写写吧。<br>
找机会一定写写技术相关，现在MarkDown还用不利索哈哈哈，对着文档在用。</p>
<hr>
<p><strong>天安门升旗</strong><br>
“天安门广场是我国……是向外国朋友展示我国风貌……疫情防控期间，请佩戴口罩……“<br>
那天在天安门广场上，不停播放这段话语。我第一次在共和国的首都，听到了60年代的广播音。这个声音在21世纪居然显得那么亲切，感觉和电视剧的一模一样。</p>
<p>伴随着太阳升起，五星红旗飘扬在华夏大地的苍穹。<br>
<img src="https://sethome2.github.io/post-images/1631336790432.jpg" alt="在拍摄天安门升旗的人们" loading="lazy"><br>
<img src="https://sethome2.github.io/post-images/1635821643351.jpg" alt="人们在用手机拍下升国旗的一瞬间" loading="lazy"></p>
<hr>
<p><strong>苏州街</strong><br>
感觉和苏州的不是很像呀，特别是阳光~维度不同。<br>
现在都是重建的了。<br>
<img src="https://sethome2.github.io/post-images/1631687374165.jpg" alt="苏州街道" loading="lazy"><br>
<img src="https://sethome2.github.io/post-images/1631687389999.jpg" alt="苏州桥" loading="lazy"></p>
<hr>
<p><strong>天坛</strong><br>
晚上的天坛，还不错吧~<br>
可惜没那种诗意捏，随手一拍。当时天色漆黑了，人眼都看不清楚，能拍成这样也挺不错的。<br>
<img src="https://sethome2.github.io/post-images/1635821210024.jpg" alt="北京天坛" loading="lazy"></p>
<hr>
<p><strong>石狮 / 铜狮</strong><br>
<img src="https://sethome2.github.io/post-images/1635821916090.jpg" alt="石狮" loading="lazy"><br>
<img src="https://sethome2.github.io/post-images/1635821922334.jpg" alt="石狮" loading="lazy"><br>
<img src="https://sethome2.github.io/post-images/1635821930819.jpg" alt="石狮" loading="lazy"><br>
<img src="https://sethome2.github.io/post-images/1635821940226.jpg" alt="石狮" loading="lazy"><br>
<img src="https://sethome2.github.io/post-images/1635821999356.jpg" alt="铜狮" loading="lazy"><br>
不说啥了，有点单调重复，没啥特色了。</p>
<hr>
<p>忘记了这个叫什么公园，所以说没有标题。<br>
一般般吧，只是矮个子里拔将军，凑个数<br>
<img src="https://sethome2.github.io/post-images/1635822067942.jpg" alt="" loading="lazy"></p>
<hr>
<p><strong>天坛</strong><br>
拿这张游客进入北京天坛里面参观祈年殿做收尾吧。<br>
<img src="https://sethome2.github.io/post-images/1635822315257.jpg" alt="游客进入北京天坛" loading="lazy"></p>
<p>更新完啦，按理来说这个应该是在8月之前搞定的，硬生生拖到现在。当时去北京是五月一日劳动节，现在回想起来，有些事情都已经记不清了。但是有些事情还是历历在目，哪独特的景观和人文气息独有在北京才能享受到。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[累，没时间写]]></title>
        <id>https://sethome2.github.io/post/lei-mei-shi-jian-xie/</id>
        <link href="https://sethome2.github.io/post/lei-mei-shi-jian-xie/">
        </link>
        <updated>2021-08-30T15:57:39.000Z</updated>
        <content type="html"><![CDATA[<p>Tried,Exhausted</p>
<p>有时间更新</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Robomaster Adam战队宣传图片]]></title>
        <id>https://sethome2.github.io/post/Robomaster-adam-zhan-dui-xuan-chuan-tu-pian/</id>
        <link href="https://sethome2.github.io/post/Robomaster-adam-zhan-dui-xuan-chuan-tu-pian/">
        </link>
        <updated>2021-08-09T09:22:05.000Z</updated>
        <content type="html"><![CDATA[<p>目前现在在齐鲁工业大学 Adam实验室这边做robomaster，然后这边决赛打完，就放一些自己拍的图片吧~<br>
我还是比较喜欢拍摄静物的哈哈哈</p>
<p>对了，我在这边主要是做电控，未来可能会学习一些机器学习的东西。</p>
<p>转载请标明出处</p>
<hr>
<p>请欣赏：</p>
<ol>
<li>
<p>先放一张我觉得最帅的<br>
<img src="https://sethome2.github.io/post-images/1628501400933.jpg" alt="" loading="lazy"></p>
</li>
<li>
<p>接下来是电控系统的一些特写<br>
<img src="https://sethome2.github.io/post-images/1628501476409.jpg" alt="" loading="lazy"><br>
<img src="https://sethome2.github.io/post-images/1628501484815.jpg" alt="" loading="lazy"><br>
<img src="https://sethome2.github.io/post-images/1628503167706.jpg" alt="" loading="lazy"></p>
</li>
<li>
<p>比赛赛场的<br>
<img src="https://sethome2.github.io/post-images/1628503233679.jpg" alt="" loading="lazy"><br>
<img src="https://sethome2.github.io/post-images/1628503244943.jpg" alt="" loading="lazy"></p>
</li>
</ol>
<hr>
<p>自感觉拍的还行，最近更图片有点多，打算写一下技术类的（其实是一篇技术的也没写）<br>
对了，打算中英混合更新，练练英语。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[RGB展示柜！！]]></title>
        <id>https://sethome2.github.io/post/rgb-zhan-shi-ju/</id>
        <link href="https://sethome2.github.io/post/rgb-zhan-shi-ju/">
        </link>
        <updated>2021-07-22T07:44:35.000Z</updated>
        <content type="html"><![CDATA[<p>其实这是我高考完暑假做的东西。<br>
先贴个b站链接：<a href="https://www.bilibili.com/video/BV1Lk4y127xm">b站链接</a><br>
待填坑。</p>
]]></content>
    </entry>
</feed>